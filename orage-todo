#!/bin/bash
#
# Print the upcoming events of orage in N(N<=7) days.
declare -A WEEKDIC FREQDIC
WEEKDIC=([SU]=0 [MO]=1 [TU]=2 [WE]=3 [TH]=4 [FR]=5 [SA]=6)
FREQDIC=([DAILY]=day [WEEKLY]=week [MONTHLY]=month [YEARLY]=year [HOURLY]=hour)
ORAGE_FILE='/tmp/orage.txt'
TODO_FILE='/tmp/todo.txt'
NOW=$(date "+%Y%m%d %H:%M:%S")
TODAY=$(date +%Y%m%d)
NDAYS="7"
function getdatediff()
{
  local startdate=$(date -d "$1" +%Y-%m-%dT%H:%M:%S)
  local finaldate=$(date -d "$2" +%Y-%m-%dT%H:%M:%S)
  case $3 in
    miniute)
      minutediff=$(datediff  $startdate $finaldate -f "%M");;
    day)
      daydiff=$(datediff  $startdate $finaldate -f "%d");;
    week)
      weekdiff=$(datediff  $startdate $finaldate -f "%w");;
    month)
      monthdiff=$(datediff  $startdate $finaldate -f "%m");;
    year)
      yeardiff=$(datediff  $startdate $finaldate -f "%y");;
  esac
}
function print_datestr()
{
  local eventday=$1
  getdatediff $TODAY $eventday day
  if [ $daydiff -lt 0 ];then
    return
  elif [ $daydiff -eq 0 ];then
    datestr="TODAY "
  elif [ $daydiff -eq 1 ];  then
    datestr="TOMMORW "
  else
    datestr=${eventday:4:2}-${eventday:6:2}" "
  fi
}
function cycle_byday_of_week()
{
  IFS=',' read -r -a days <<< "$byday"
  today=$TODAY
  local n="1"
  while (( ${today} <= ${TODAY} + ${NDAYS} ));do
    weeknumber=$(date -d "${today}" +%w)
    for day in "${days[@]}";do
        if (( ${WEEKDIC[$day]} == ${weeknumber} ));then
          event_dates[$n]=${today}
          n=$(($n+1))
        fi
    done
    today=$(date -d "1 day ${today}" +%Y%m%d)
  done
  for event_date in "${event_dates[@]}";do
    if (( ${event_date} < ${TODAY} ))||(( ${event_date} > ${TODAY}+${NDAYS} )) \
       ||(( ${event_date} > ${end_date} ));  then
      continue
    fi
    if [ -n "$interval" ]; then
      case $freq in
        WEEKLY)
          day=$(date -d "${stime:0:8}" +%w)
          week_start=$(date -d "${stime:0:8} -$day days" +%Y%m%d)
          day=$(date -d "${event_date}" +%w)
          week_end=$(date -d "${event_date} -$day days" +%Y%m%d)
          getdatediff ${week_start} ${week_end} week
          modflag=$(( ${weekdiff} % ${interval} ))
          ;;
        MONTHLY)
          month_start=$(date -d "${stime:0:8}" +%Y%m01)
          month_end=$(date -d "${event_date}" +%Y%m01)
          getdatediff ${month_start} ${month_end} month
          modflag=$(( ${monthdiff} % ${interval} ))
          ;;
        YEARLY)
          year_start=$(date -d "${stime:0:8}" +%Y)
          year_end=$(date -d "${event_date}" +%Y)
          modflag=$(( (${year_end} - ${year_start}) % ${interval} ))
          ;;
      esac
      if (( modflag != 0 ));then
        continue
      fi
    fi
    event_time=$event_date" "${stime:9:2}":"${stime:11:2}":"${stime:13:2}
    getdatediff "$NOW" "$event_time" "miniute"
    print_datestr $event_date
    echo $minutediff'@_@'$datestr${stime:9:2}:${stime:11:2}:$summary >>$TODO_FILE

  done

}
function cycle_by_time()
{
  while (( ${start_date} <= ${end_date} ));do
    if (( ${start_date} >= ${TODAY} )) && \
        (( ${start_date} < ${TODAY} + ${NDAYS} ));then
      event_date=$start_date
      event_time=$event_date" "${stime:9:2}":"${stime:11:2}":"${stime:13:2}
      getdatediff "$NOW" "$event_time" "miniute"
      print_datestr $event_date
      echo $minutediff'@_@'$datestr${stime:9:2}:${stime:11:2}:$summary >>$TODO_FILE
    fi
    start_date=$(date -d "${interval} ${FREQDIC["$freq"]} ${start_date}" +%Y%m%d)
  done
}
function periodic_event()
{
  local summary=$(echo $1| tr -d '\r')
  freq=$(echo $rrule|grep -Eo 'FREQ=[A-Z]*'|sed 's/FREQ=//g')
  until=$(echo $rrule|grep -Eo 'UNTIL=[0-9T]*'|sed 's/UNTIL=//g')
  byday=$(echo $rrule|grep -Eo 'BYDAY=[A-Z,]*'|sed 's/BYDAY=//g')
  count=$(echo $rrule|grep -Eo 'COUNT=[0-9]*'|sed 's/COUNT=//g')
  interval=$(echo $rrule|grep -Eo 'INTERVAL=[0-9]*'|sed 's/INTERVAL=//g')
  start_date=${stime:0:8}
  end_date=$(date -d "+${NDAYS} days" +%Y%m%d)
  if [ -n "$interval" ]; then
    interval=$(($interval))
  else
    interval="1"
  fi
  if [ -n "$until" ]; then
    ul_date=${until:0:8}
    end_date=$([ $end_date -le $ul_date ] && echo $end_date||echo $ul_date)
  elif [ -n "$count" ]; then
    ninter=$(( ${interval} * (${count}-1)  ))
    if [ -n "$byday" ]; then
      end_date=$(date -d "${ninter} week ${start_date}" +%Y%m%d)
    else
      end_date=$(date -d "${ninter} ${FREQDIC["$freq"]} ${start_date}" +%Y%m%d)
    fi
  fi
  if [ -n "$byday" ]; then
    cycle_byday_of_week $summary
  else
    cycle_by_time $summary
  fi

}
function main()
{
  cat /dev/null >$TODO_FILE #clear todo file
  orage -e $ORAGE_FILE >/dev/null 2>/dev/null
  sed -i ""s/\r//"" $ORAGE_FILE
  ind=0;
  eval $(awk -v ind="$ind" -F':' '/SUMMARY:/ {\
        print "summarys["ind"]=\x27"substr($2, 0,length($2)-1)"\x27";\
        print "lines["ind"]="FNR;ind++}' $ORAGE_FILE)
  dtstarts=($(awk -F';' '/DTSTART/ {print}' $ORAGE_FILE))
  for(( i=0;i<${#summarys[@]};i++)) do
    local sl=$((${lines[i]}+1))
    local el=$((${lines[i]}+5))
    stime=$(echo ${dtstarts[i]} |awk -F: '{print $2}')
    rrule=$(sed -n $sl,$el'p' $ORAGE_FILE|awk -F':' '/RRULE:/ {print $2}')
    if [ -n "$rrule" ]; then
      periodic_event  ${summarys[i]}
    else
      event_date=${stime:0:8}
      getdatediff "$NOW" "$event_date" "day"
      if [ $daydiff -lt 0 ];then
        continue
      fi
      print_datestr $event_date
      if [[ ${dtstarts[i]} == *'DATE'* ]]; then #allday event
        datestr=$datestr"全天"
        getdatediff "$NOW" "$event_date" "miniute"
      else
        event_time=${stime:0:8}" "${stime:9:2}":"${stime:11:2}":"${stime:13:2}
        getdatediff "$NOW" "$event_time" "miniute"
        datestr=$datestr${stime:9:2}":"${stime:11:2}
      fi
      echo $minutediff"@_@"$datestr":"${summarys[i]}| tr -d '\r'>>$TODO_FILE
    fi
  done
  sort -n $TODO_FILE -o $TODO_FILE #sort events by miniute intervals
  awk -F@_@ '{print $2}' $TODO_FILE|head -n 5
}
main "$@"
